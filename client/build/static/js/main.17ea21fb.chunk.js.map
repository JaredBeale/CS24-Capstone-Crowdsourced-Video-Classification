{"version":3,"sources":["components/VideoPlayer.js","components/VideoPage.js","serviceWorker.js","index.js"],"names":["App","props","load","url","setState","played","loaded","pip","ref","player","state","playing","isPlaying","controls","light","volume","muted","duration","playbackRate","loop","handlePlayPause","bind","restartVideo","this","seekTo","console","log","ReactPlayer","canPlay","id","commonName","onProgress","handleProgress","onReady","onStart","onClick","React","Component","VideoPage","Boolean","window","location","hostname","match","path","exact","to","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8UA+FeA,E,YAzFb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAoBRC,KAAO,SAAAC,GACL,EAAKC,SAAS,CACZD,MACAE,OAAQ,EACRC,OAAQ,EACRC,KAAK,KA1BS,EA6BlBC,IAAM,SAAAC,GACJ,EAAKA,OAASA,GA5Bd,EAAKC,MAAQ,CACXP,IAAK,KACLI,KAAK,EACLI,QAASV,EAAMW,UACfC,UAAU,EACVC,OAAO,EACPC,OAAQ,GACRC,OAAO,EACPX,OAAQ,EACRC,OAAQ,EACRW,SAAU,EACVC,aAAc,EACdC,MAAM,GAER,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBAEvB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKlB,IAAMF,EAAME,IAnBD,E,iFAkChBoB,KAAKrB,KAAKqB,KAAKpB,O,wCAWfoB,KAAKnB,SAAS,CAAEO,SAAUY,KAAKb,MAAMC,Y,qCAGpCY,KAAKd,OAAOe,OAAO,K,+BAKpBC,QAAQC,IAAIC,IAAYC,QAAQ,qCAD1B,MAEkBL,KAAKb,MAAvBC,EAFA,EAEAA,QAAUR,EAFV,EAEUA,IAId,OACE,yBAAK0B,GAAG,uBAEJ,yBAAKA,GAAG,SACR,4BAAKN,KAAKtB,MAAM6B,YACd,kBAAC,IAAD,CACEtB,IAAKe,KAAKf,IACVuB,WAAYR,KAAKS,eACjBC,QAAS,kBAAMR,QAAQC,IAAI,YAC3BQ,QAAS,kBAAMT,QAAQC,IAAI,YAC3Bf,QAASA,EACTR,IAAKA,KAGT,yBAAK0B,GAAG,kBACN,4BAAQM,QAASZ,KAAKH,iBAAkBT,EAAU,QAAU,QAC5D,4BAAQwB,QAASZ,KAAKD,cAAtB,iB,GA3EIc,IAAMC,WCgBTC,E,iLAPX,OACA,yBAAKT,GAAG,wBACN,kBAAC,EAAD,CAAQC,WAAY,qBAAsB3B,IARhC,gDASV,wD,GALkBkC,aCAJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICPA3C,E,iLAGF,OACA,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAO4C,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,4CAEF,kBAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,KAClB,6BACE,kBAAC,IAAD,CAAME,GAAG,UAAT,eAEF,6BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,iB,GAjBQV,IAAMC,WA4BxBU,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4F3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.17ea21fb.chunk.js","sourcesContent":["import React from 'react';\nimport ReactPlayer from \"react-player\";\n\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      url: null,\n      pip: false,\n      playing: props.isPlaying,\n      controls: false,\n      light: false,\n      volume: 0.8,\n      muted: false,\n      played: 0,\n      loaded: 0,\n      duration: 0,\n      playbackRate: 1.0,\n      loop: false\n    }\n    this.handlePlayPause = this.handlePlayPause.bind(this);\n    // this.handleProgress = this.handleProgress.bind(this);\n    this.restartVideo = this.restartVideo.bind(this);\n    this.url = props.url;\n  }\n  load = url => {\n    this.setState({\n      url,\n      played: 0,\n      loaded: 0,\n      pip: false\n    })\n  }\n  ref = player => {\n    this.player = player\n  }\n\n  componentDidMount(){\n    this.load(this.url);\n  }\n  // handleProgress(state){\n  //   console.log('onProgress', state)\n  //   // We only want to update time slider if we are not currently seeking\n  //   if (!this.state.seeking) {\n  //     this.setState(state)\n  //   }\n  // }\n\n  handlePlayPause(){\n    this.setState({ playing: !this.state.playing })\n  }\n  restartVideo(){\n     this.player.seekTo(0)\n  }\n\n\n  render(){\n    console.log(ReactPlayer.canPlay('static/v2-in-the-butt-bender.mp4'));\n    var { playing , url,} = this.state\n\n\n\n      return (\n        <div id=\"video-player-widget\">\n\n            <div id=\"video\" >\n            <h1>{this.props.commonName}</h1>\n              <ReactPlayer\n                ref={this.ref}\n                onProgress={this.handleProgress}\n                onReady={() => console.log('onReady')}\n                onStart={() => console.log('onStart')}\n                playing={playing}\n                url={url}\n              />\n            </div>\n            <div id=\"video-controls\">\n              <button onClick={this.handlePlayPause}>{playing ? 'Pause' : 'Play'}</button>\n              <button onClick={this.restartVideo}>Restart</button>\n\n            </div>\n\n\n\n        </div>\n      );\n    }\n\n\n\n}\n\n\nexport default App\n","import React, { Component} from 'react';\n\nimport Player from \"./VideoPlayer\"\n\n// const AWS_FILE_NAME =\"sticky-bottom.mp4\";\n\n// var gdrive_uri = `http://drive.google.com/uc?export=download&id=${DRIVE_FILE_ID}`;\n// var aws_uri =`https://quick-start-xandr-videohost.s3.amazonaws.com/${AWS_FILE_NAME}`;\nconst aws_uri = \"https://www.youtube.com/watch?v=to3OFgBcQvg\";\n\n\n\nclass VideoPage extends Component{\n  render(){\n    return (\n    <div id=\"video-page-container\">\n      <Player commonName={\"Luke Raises x-wing\"} url={aws_uri} />\n      <h1>This will be a form</h1>\n    </div>)\n  }\n}\nexport default VideoPage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router,Route, Link} from 'react-router-dom';\nimport './index.css';\nimport VideoPage from './components/VideoPage';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\nclass App extends React.Component {\n\n  render(){\n    return(\n    <Router>\n      <div>\n        <Route path=\"/watch\">\n          <VideoPage />\n        </Route>\n        <Route path=\"/login\">\n          <h1> pls login </h1>\n        </Route>\n        <Route exact path=\"/\">\n        <div>\n          <Link to=\"/watch\">WatchVideo</Link>\n        </div>\n        <div>\n          <Link to=\"/login\">Login</Link>\n        </div>\n\n        </Route>\n      </div>\n    </Router>\n    );\n  }\n\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}